plugins {
    id 'idea'
    id 'java'
    id "eu.xenit.docker" version "4.1.1"
}

repositories {
    mavenCentral()
}

ext {
    grafanaVersion = "6.4.3"

    junitJupiterVersion = '5.5.2'
    mockitoVersion = '3.1.0'
    hamcrestVersion = '1.3'
    restAssuredVersion = '4.1.2'
    slf4jVersion = '1.7.25'

}

dockerFile {

    dockerFile = file('Dockerfile')
    dockerBuild {
        repository = 'hub.xenit.eu/public/grafana'
        tags = ['6', '6.4', '6.4.3']
    }
}

buildDockerImage {
    buildArgs = ['GRAFANA_VERSION': project.grafanaVersion]

    doFirst {
        println "-- build args: $buildArgs"
    }
}

/* Integration testing */

jar.enabled = false // The artifact of this project is the docker image, not the jar

dependencies {
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.hamcrest:hamcrest-all:${hamcrestVersion}"

    testImplementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: "${slf4jVersion}"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

dockerCompose {
    useComposeFiles = ['./src/test/resources/compose/docker-compose.yml']

    removeVolumes = true
    captureContainersOutput = false

    // Uncomment for quick iterations when developing tests
    // stopContainers = false

    // expose Grafana on a random port, comment to use default port (3000)
    environment.put 'GRAFANA_TCP_3000', '3000'

    isRequiredBy(project.tasks.test)
}
